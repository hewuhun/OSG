// Copyright (c) 2011-2015 Sundog Software LLC. All rights reserved worldwide.

#ifndef TRITON_WAKE_MANAGER_H
#define TRITON_WAKE_MANAGER_H

/** \file WakeManager.h
    \brief Classes to keep track of the waves from ship wakes
*/

#include <FeTriton/TritonCommon.h>
#include <FeTriton/Vector3.h>
#include <FeTriton/Matrix3.h>
#include <FeTriton/Matrix4.h>
#include <FeTriton/Frustum.h>
#include <FeTriton/ParticleSystem.h>
#include <FeTriton/WakeGenerator.h>
#include <FeTriton/TidalStreamWake.h>
#include <FeTriton/ProjectedGrid.h>
#include <list>
#include <map>

namespace Triton
{
class Environment;

enum WakeClassID {
    KELVIN_WAKE,
    CIRCULAR_WAVE,
    PROP_WASH,
    LEEWARD_DAMPENER
};

class WaterDisturbance : public MemObject
{
public:
    WaterDisturbance();

    virtual ~WaterDisturbance() {}

    /** Updates the amplitude and radius of the wave for the given time sample, and indicates
        if this wave may be discarded.
        \param time The current simulated time, in seconds. The reference time it is relative to
                    should be consistent with the startTime member's reference.
        \param worldUnits The size of a world unit, in meters.
        \return True if this wave is large enough to remain simulated, or false if its amplitude
                has decreased to the point where it may be discarded.
    */
    virtual bool Update(double time, double worldUnits) = 0;

    /** Retrieves the squared distance from a point to the center of this wave.
        \param from The point, in world coordinates, to compute the distance from.
        \return The distance from the given point to the center of this wave, in world units, squared.
    */
    double GetDistanceSquared(const Vector3& from) const;

    virtual double GetDistanceFromGenerator() const;

    WakeClassID GetClassID() const {
        return classID;
    }

    Vector3 position;
    double startDistanceTravelled;
    const WakeGenerator *generator;
    const TidalStreamWake *tidalStream;
    WakeClassID classID;
};

/** A wave from a single impulse from a WakeGenerator. Wakes are modeled by integrating many circular waves
    generated by sampled impulses from the wake generating object, that expand and dissipate over time. */
class CircularWave : public WaterDisturbance
{
public:
    /** Constructs a wave with no radius or amplitude. */
    CircularWave();

    /** Updates the amplitude and radius of the wave for the given time sample, and indicates
        if this wave may be discarded.
        \param time The current simulated time, in seconds. The reference time it is relative to
                    should be consistent with the startTime member's reference.
        \param worldUnits The size of a world unit, in meters.
        \return True if this wave is large enough to remain simulated, or false if its amplitude
                has decreased to the point where it may be discarded.
    */
    bool Update(double time, double worldUnits);

    double amplitude, velocity, wavelength, startTime;
    double radius, beamWidth;
    double waveDecay;
    Vector3 shipDirection;
	double wakeFadeInTime;

    static double minAmplitude, maxAmplitude, wakeScale;
};

/** An area surrounding a ship that will dampen waves in the direction of the wind. */
class LeewardDampener : public WaterDisturbance
{
public:
    LeewardDampener();

    bool Update(double time, double worldUnits);

    Vector3 bowPos, sternPos;
    float velocityDampening;

    static float maxLeewardDampeningVelocity;
    static float scaledMaxLeewardDampeningVelocity;
};

/** A wake interference pattern left behind a moving ship. */
class KelvinWake : public WaterDisturbance
{
public:

    KelvinWake();

    /** Updates the amplitude and radius of the wave for the given time sample, and indicates
        if this wave may be discarded.
        \param time The current simulated time, in seconds. The reference time it is relative to
                    should be consistent with the startTime member's reference.
        \param worldUnits The size of a world unit, in meters.
        \return True if this wave is large enough to remain simulated, or false if its amplitude
                has decreased to the point where it may be discarded.
    */
    virtual bool Update(double time, double worldUnits);


    double amplitude, velocity, waveDecay, startTime;
    bool isExplicit;
    Vector3 explicitOrigin;
    float foamAmount;

    static double minAmplitude, maxAmplitude, wakeScale, gravity, wakeFadeInTime;
};

/** A segment of turbulent propeller wash. */
class PropWashSegment : public WaterDisturbance
{
public:

    PropWashSegment(double maxLength, double fadeTime);

    /** Updates the amplitude and radius of the wave for the given time sample, and indicates
        if this wave may be discarded.
        \param time The current simulated time, in seconds. The reference time it is relative to
                    should be consistent with the startTime member's reference.
        \param worldUnits The size of a world unit, in meters.
        \return True if this wave is large enough to remain simulated, or false if its amplitude
                has decreased to the point where it may be discarded.
    */
    virtual bool Update(double time, double worldUnits);

    virtual double GetDistanceFromGenerator() const;

    Vector3 deltaPos;
    double shipLength, beamWidth;
    double washWidth, wakeLength;
    double fadeTime, startTime, lastTime;
    int number;
    double alphaStart, alphaEnd;

    static double washScale, propWaveHeightFade;
};

/** An object to store a new spray particle system creation request, so its actual
    creation may be deferred until rendering time. */
class NewSprayRequest : public MemObject
{
public:
    Vector3 position;
    bool hasDirection;
    Vector3 direction;
    double velocity;
    double time;
    double particleSize;
    float transparency;
    double posVariation;
    double effectScale;
};

/** A class to manage the updating and drawing of wakes in the scene. Although many individual waves from many
    wakes may be simulated, only a finite amount may be rendered in any given frame. This class keeps those
    waves updated, and selects the best ones to draw.*/
class WakeManager : public MemObject
{
public:
    /** Constructs a WakeManager, typically associated with a single Ocean.
        \param unitScale The size of a world unit, in meters.
        \param psm The ParticleSystemManager associated with the wakes.
    */
    WakeManager(double unitScale, ParticleSystemManager *psm);

    /** Virtual destructor. */
    virtual ~WakeManager();

    /** Associates the WakeManager with Triton's shader, and retrieves handles to the uniform parameters
        associated with drawing wakes.
        \param pGrid The ProjectedGrid associated with this wake manager.
        \param env The Triton::Environment associated with the wakes
        \return True if the expected uniform parameters were found in the shader.
    */
    virtual bool Initialize(const ProjectedGrid *pGrid, const Matrix3& pBasis, const Environment *env) {
        shader = pGrid->GetShader();
        patchShader = pGrid->GetPatchShader();
        grid = pGrid;
        basis = pBasis;
        environment = env;
        return true;
    }

    /** Sets the uniform parameters for wake rendering. */
    virtual bool PrepShaders(const Environment *env) {
        return false;
    }

    /** Sets the uniform parameters for wake rendering. */
    virtual bool PrepPatchShader(const Environment *env) {
        return false;
    }

    /** Retrieve the underlying shader object for the wake spray particles. */
    virtual ShaderHandle GetShader() const {
        return 0;
    }

    /** Call this each frame to update the wake simulations for every impulse managed by this class.
        \param cameraPosition The position of the viewpoint in world units.
        \param time The current simulated time, in seconds.
        \param environment The Environment object used for culling wakes.
    */
    void Update(const Vector3& cameraPosition, double time, const Environment *environment);

    /** Returns the time interval between the creation of spray particle effects for a given WakeGenerator.
        \return The time between spray particle effects, in seconds.
    */
    double GetSprayGenerationPeriod() const {
        return sprayGenerationPeriod;
    }

    /** Returns the distance between the creation of wave-generating impulses per Triton::WakeGenerator, as
        a function of the ship length.
        \return The multiple of the ship length used to emit new wake waves.
    */
    double GetWaveGenerationDistance() const {
        return waveGenerationDistance;
    }

    /** Adds a new wave-generating circular wave to the simulation. After it decays to a small amplitude, the wave
        will automatically be removed.
        \param shipVelocity The initial velocity associated with this wave, which dictates its expansion rate.
        \param position The position, in world coordinates, of the impulse.
        \param time The time the impulse was generated, in seconds.
        \param direction The vector from this impulse to the previous one emitted by this impulse generator.
        \param sternWidth The width of the object generating this impulse, which will be used for the initial size.
        \param decayRate The exponent for decaying wave amplitude as a function of wave radius (should be 1/3 nominally)
        \param generator The WakeGenerator object that created this impulse.
    */
    void AddCircularWave(double shipVelocity, const Vector3& position, double time,double fadeTime,
                         const Vector3& direction, double sternWidth, double decayRate, const WakeGenerator *generator);

    /** Adds a new turbulent prop wash segment to the simulation. After a set distance from the ship, the segment will
        automatically be removed.
        \param wakeNumber The sequence number in which this impulse was emitted from the wake generator.
        \param deltaPosition The vector from this impulse to the previous one emitted by this impulse generator.
        \param shipLength The length of the ship creating this impulse.
        \param sternWidth The width of the object generating this impulse, which will be used for the initial size.
        \param time The time stamp, in seconds, this prop wash was emitted at.
        \param fadeTime The time, in seconds, over which this prop wash segment should dissipate.
        \param generator The WakeGenerator object that created this impulse.
    */
    void AddPropWash(int wakeNumber, const Vector3& washPosition,
                     const Vector3& deltaPosition, double shipLength, double sternWidth,
                     double time, double fadeTime, const WakeGenerator *generator);

    /** Adds a new interference maxima from Kelvin wakes behind a ship. After it decays to a small amplitude, the wave
        will automatically be removed.
        \param shipVelocity The initial velocity associated with this wave, which dictates its expansion rate.
        \param position The position, in world coordinates, of the impulse.
        \param decayRate The exponent for decaying wave amplitude as a function of wave radius (should be 1/3 nominally)
        \param generator The WakeGenerator object that created this impulse.
    */
    void AddKelvinWake(double shipVelocity, const Vector3& position, double time, double decayRate, const WakeGenerator *generator);

    /** Updates an existing prop wash segment's position, as identified by its wake number and WakeGenerator source.
        \param wakeNumber The wake number (unique to the WakeGenerator) used when AddImpulse was called.
        \param newPosition The updated position of the impulse.
        \param newDelta The vector from this updated impulse position to the previous impulse.
        \param time The current timestamp in seconds.
        \param generator The WakeGenerator object that created this impulse.
    */
    void UpdatePropWash(int wakeNumber, const Vector3& newPropPosition, const Vector3& newDelta, double time, const WakeGenerator *generator);

    /** Adds a spray particle effect at the given position, velocity, and time, shooting up.
        \param shipVelocity The velocity at which the spray particles will be ejected
        \param position The average position of the spray particle origins
        \param time The time the spray effect is starting, in seconds.
        \param positionVariation The maximum random offset from the position given.
        \param effectScale A scaling factor for the particle sizes and spread
    */
    void AddSpray(double shipVelocity, const Vector3& position, double time, double positionVariation = -1, double effectScale = 1.0);

    /** Adds a spray particle effect at the given position, direction, velocity, and time.
        \param shipVelocity The velocity at which the spray particles will be ejected
        \param position The average position of the spray particle origins
        \param direction The direction the spray particle should shoot out from.
        \param time The time the spray effect is starting, in seconds.
        \param particleSize The diameter of the spray particle, or -1 for the default setting.
    */
    void AddDirectionalSpray(double shipVelocity, const Vector3& position, const Vector3& direction, double time,
                             double particleSize = -1.0, float transparency = -1.0f, double positionVariation = -1.0);

    /** Adds a wake wave whose amplitude, position, and wavelength will be set explicitly each frame via UpdateExplicitWave(). Used for
        bow waves.
        \param generator The WakeGenerator associated with this explicit wave. Only one explicit wave per WakeGenerator is allowed.
        \param size The maximum radius of the wave, in world units.
    */
    void AddExplicitWave(WakeGenerator *generator, double size);

    /** Updates the parameters of the explicit wave for this WakeGenerator, as previously declared with AddExplicitWave(). */
    void UpdateExplicitWave(WakeGenerator *generator, const Vector3& position, const Vector3& direction, double amplitude, double wavelength);

    /** Adds a wake wave whose amplitude, position, and wavelength will be set explicitly each frame via UpdateExplicitWave(). Used for
    tidal stream wakes.
    \param generator The TidalStreamWake associated with this explicit wave. Only one explicit wave per TidalStreamWake is allowed.
    \param size The maximum radius of the wave, in world units.
    */
    void AddExplicitWave(TidalStreamWake *generator, double size);

    /** Updates the parameters of the explicit wave for this TidalStreamWake, as previously declared with AddExplicitWave(). */
    void UpdateExplicitWave(TidalStreamWake *generator, const Vector3& position, const Vector3& direction, double amplitude, double wavelength);

    /** Adds an area of dampened waves leeward of a ship. */
    void AddLeewardDampener(WakeGenerator *generator);

    /** Updates a given leeward dampener with the current bow and stern of the ship. */
    void UpdateLeewardDampener(WakeGenerator *generator, const Vector3& bowPos, const Vector3& sternPos, double velocity);

    /** Must be called upon a lost device in Direct3D9. */
    virtual void D3D9DeviceLost() {}

    /** Must be called upon a reset device in Direct3D9. */
    virtual void D3D9DeviceReset() {}

    /** Returns the height of the water at the given position as affected by the wakes.
        \param position The position on the water surface to test
        \param grid The ProjectedGrid object representing the water surface
        \param normal Returns the normal vector of the wake wave at the given position
        \return The vertical displacement at this location due to wakes
    */
    virtual float GetHeight(const Vector3& position, const ProjectedGrid *grid, Vector3& normal);

    /** Removes all waves originating from the given TidalStreamWake. */
    void RemoveWakeGenerator(TidalStreamWake *generator);

    /** Removes all waves originating from the given WakeGenerator. */
    void RemoveWakeGenerator(WakeGenerator *generator);

    /** Removes all leeward dampeners originating from the given WakeGenerator. */
    void RemoveLeewardDampener(WakeGenerator *generator);

    /** Reloads shaders linking in user-supplied shaders (OpenGL only) */
    virtual bool ReloadShaders(const TRITON_VECTOR(unsigned int)& shaders, unsigned int gridShader, unsigned int gridPatchShader) {
        return true;
    }

    /** Retrieves the decal texture for rotor wash. */
    TextureHandle GetRotorWashTexture() const {
        return rotorWashTexture;
    }

    /** Retrieves the decal texture for tidal stream wakes. */
    TextureHandle GetTidalStreamTexture() const {
        return tidalStreamTexture;
    }

protected:
    int ApplyLODs(const Vector3& camPos, const Environment *env, int lodBias = 0);

    double waveGenerationDistance, sprayGenerationPeriod;
    ShaderHandle shader, patchShader;
    TRITON_LIST(WaterDisturbance*) waves, visibleWaves;
    ParticleSystem **sprays;
    TRITON_VECTOR(NewSprayRequest) sprayRequests;
    TRITON_MAP(WakeGenerator*, KelvinWake*) explicitWaves;
    TRITON_MAP(TidalStreamWake*, KelvinWake*) explicitWavesTSW;
    TRITON_MAP(WakeGenerator*, LeewardDampener*) leewardDampeners;
    const Environment *environment;
    int nextSpray;
    int numSprays;
    int numParticles;
    double sprayVelocityVariation, sprayPositionVariation;
    double spraySize, spraySizeVariation, sprayDirectionVariation, sprayTransparency;
    bool cullSprays;
    double unitScale, wakeLength, wakeSprayElevation;
    double maxKelvinDist, maxCircularDist, maxLeewardDampenerDist;
    Matrix3 basis;
    ParticleSystemManager *particleSystemManager;
    int maxCircularWaves, maxKelvinWakes, maxPropWashes, maxLeewardDampeners;
    bool leewardDampening;
    const ProjectedGrid *grid;
    TextureHandle rotorWashTexture, tidalStreamTexture;
    double gravity;
    float tidalStreamFoam;
};
}

#endif
