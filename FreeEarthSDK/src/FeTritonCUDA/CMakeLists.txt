set(OUT_NAME FeTritonCUDA)
include_directories(${CMAKE_SOURCE_DIR}/include)

SET(PROJECT_INCLUDE ${CMAKE_SOURCE_DIR}/include/FeTriton)
SET(PROJECT_INCLUDE1 ${CMAKE_SOURCE_DIR}/include/FeTritonCUDA)
SET(PROJECT_SRC ${CMAKE_SOURCE_DIR}/src/FeTriton)
SET(PROJECT_SRC1 ${CMAKE_SOURCE_DIR}/src/FeTritonCUDA)
find_package(CUDA QUIET REQUIRED)
set(HEADER 
	${PROJECT_INCLUDE}/ComplexNumber.h
	${PROJECT_INCLUDE1}/FFTCUDAImpl.h
	${PROJECT_INCLUDE1}/stdafx.h
	${PROJECT_INCLUDE1}/targetver.h
	${PROJECT_INCLUDE1}/Export.h
    )
           
set(SOUECE 
	${PROJECT_SRC1}/dllmain.cpp
	${PROJECT_SRC1}/FFTCUDAImpl.cpp
	${PROJECT_SRC1}/FFTWaterModel.cu
	${PROJECT_SRC}/MemAlloc.cpp
	${PROJECT_SRC1}/stdafx.cpp
	${PROJECT_SRC1}/TritonCUDA.cpp
    )

if(${BUILD_SHARED_LIBS} STREQUAL "On")
    CUDA_ADD_LIBRARY(${OUT_NAME} SHARED ${SRC} ${HEADER} ${SOUECE})
    ADD_DEFINITIONS(-DCUDA_LIBRARY)
	ADD_DEFINITIONS(-DTRITON_LIBRARY)
else()
    CUDA_ADD_LIBRARY(${OUT_NAME} STATIC ${SRC} ${HEADER} ${SOUECE})
    ADD_DEFINITIONS(-DCUDA_LIBRARY_STATIC)
	ADD_DEFINITIONS(-DTRITON_LIBRARY_STATIC)
endif()

target_link_libraries(  
    ${OUT_NAME} 
	${CUDA_LIBRARIES}
	${CUDA_CUFFT_LIBRARIES}
        ${OPENGL_LIBRARIES}
        )

INSTALL(TARGETS ${OUT_NAME}  DESTINATION lib)
INSTALL(TARGETS ${OUT_NAME}  DESTINATION bin)

INSTALL(FILES ${HEADER} DESTINATION include/FeTritonCUDA)

